const CACHE_NAME = 'wildlife-watch-v1';
const urlsToCache = [
    './',
    './index.html',
    './manifest.json',
    'https://cdn.tailwindcss.com',
    'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap'
];

// --- Database Helper ---
function openDb() {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open('wildlifeDB', 2);
        request.onerror = event => reject('DB Error: ' + event.target.errorCode);
        request.onsuccess = event => resolve(event.target.result);
        request.onupgradeneeded = event => {
            const db = event.target.result;
            if (!db.objectStoreNames.contains('reports')) {
                db.createObjectStore('reports', { keyPath: 'id', autoIncrement: true });
            }
        };
    });
}

// --- Install Service Worker and Cache Assets ---
self.addEventListener('install', event => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => {
                console.log('Opened cache');
                return cache.addAll(urlsToCache);
            })
    );
});

// --- Fetch from Cache (Offline-First) ---
self.addEventListener('fetch', event => {
    event.respondWith(
        caches.match(event.request)
            .then(response => {
                // Cache hit - return response
                if (response) {
                    return response;
                }
                // Not in cache - fetch from network
                return fetch(event.request);
            })
    );
});

// --- Background Sync ---
self.addEventListener('sync', event => {
    if (event.tag === 'send-reports') {
        event.waitUntil(sendPendingReports());
    }
});

async function sendPendingReports() {
    const db = await openDb();
    const transaction = db.transaction(['reports'], 'readwrite');
    const store = transaction.objectStore('reports');
    const getAllRequest = store.getAll();

    return new Promise((resolve, reject) => {
        getAllRequest.onsuccess = () => {
            const reports = getAllRequest.result;
            if (reports.length > 0) {
                // In a real app, you would loop through and POST these to a server.
                // Since we are using mailto:, we can just notify the user.
                self.registration.showNotification('Wildlife Reports Pending', {
                    body: `You have ${reports.length} report(s) ready to send. Open the app to complete submission.`,
                    icon: 'https://placehold.co/192x192/16a34a/ffffff?text=WGY'
                });

                // For demonstration, let's clear the reports as if they were sent.
                // In a real scenario, you'd only clear them on a successful server response.
                const clearTransaction = db.transaction(['reports'], 'readwrite');
                clearTransaction.objectStore('reports').clear();
                resolve();
            } else {
                resolve();
            }
        };
        getAllRequest.onerror = (event) => {
            console.error('Error getting reports from DB:', event);
            reject();
        };
    });
}

// --- Activate and Clean Up Old Caches ---
self.addEventListener('activate', event => {
    const cacheWhitelist = [CACHE_NAME];
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cacheName => {
                    if (cacheWhitelist.indexOf(cacheName) === -1) {
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
});

